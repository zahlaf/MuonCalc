#==============================================================================
author: abdoelhosary
"""



import math
import time

bohr_magneton=9.27401E-24
lorentz_radius = 1000000
PI=math.pi
radius=10  #Each side end to end is (2*radius+1), set to 0 for unit cell
# CHANGE the radius if you would like to change the dimensions of your array, dimensions are (radius*2+1) by (radius*2+1) by (radius*2+1)

Name=raw_input("ENTER FILE NAME(with .txt): ") 

def lorentz_error_check(lorentz_radius):
    
    
    smallest_unit=unit_cell_dim[0]
    for i in range (3):
        if (unit_cell_dim[i]<smallest_unit):
            smallest_unit=unit_cell_dim[i]
            
    if (lorentz_radius > smallest_unit * radius):
        lorentz_radius = smallest_unit * radius
        print("**Warning: Lorentz sphere too large. Using radius of %f Angstrom.**\n" % (lorentz_radius))
    else:
        print("Running Lorentz sphere of %f Angstrom."% (lorentz_radius))
    
    return lorentz_radius

def open_file(Name): #functions that opens file
    
    unit_cell_dim=[0,0,0]
    dipolar_atoms=[]
    
    with open(Name) as f:
        polyShape = []
        for line in f:
            line = line.split() 
            if line:            
                line = [float(i) for i in line]
                polyShape.append(line)
    
        unit_cell_dim[0]=polyShape[0][0]
        unit_cell_dim[1]=polyShape[0][1]
        unit_cell_dim[2]=polyShape[0][2]
        atoms=int(polyShape[1][0])
        
        for i in range (atoms):
            dipolar_atoms.append([0,0,0,0,0])
            
    for i in range (atoms):
        dipolar_atoms[i][0]=round(polyShape[2+i][0],6)
        dipolar_atoms[i][1]=round(polyShape[2+i][1],6)
        dipolar_atoms[i][2]=round(polyShape[2+i][2],6)
        dipolar_atoms[i][3]=round(polyShape[2+i][3],6)
        dipolar_atoms[i][4]=round(polyShape[2+i][4],6)
        
        
    return Name,unit_cell_dim, dipolar_atoms,atoms
    


def get_dimensions(unit_cell_dim,atoms): #User inputs cell dimensions in terms of fractions of unit cell
    
   print("\nEnter muon probe location site (a,b,c)\n")
   a=input('a: ')
   b=input('b: ')
   c=input('c: ')
   muon_loc=[a,b,c]
   
   for i in range (3):
       muon_loc[i]=round(float(muon_loc[i]) * unit_cell_dim[i],4)
   print("\nMuon probe location= "+str(muon_loc)) #Function then converts the unit cell dimensions to be in terms of Angstroms
    
   side= (2 * radius +1)
    
   return muon_loc,side

def convert_dimensions(dipolar_atoms,unit_cell_dim,atoms): #Atom locations are given as fractions of unit cell size, this converts them to Angstroms
    dipole_components=[]
    for i in range (atoms):
        dipole_components.append([0,0,0])
    
    
    for i in range(atoms):
        dipolar_atoms[i][0] = round(dipolar_atoms[i][0] * unit_cell_dim[0],5)		
        dipolar_atoms[i][1] = round(dipolar_atoms[i][1] * unit_cell_dim[0],5)	
        dipolar_atoms[i][2] = round(dipolar_atoms[i][2] * unit_cell_dim[0],5)	
   
        dipole_components[i][0] = bohr_magneton * math.cos(dipolar_atoms[i][4] 
        * PI / 180) * (math.sin(dipolar_atoms[i][3] * PI / 180))

        dipole_components[i][1] = bohr_magneton * math.sin(dipolar_atoms[i][4] * 
                         PI / 180) * (math.sin(dipolar_atoms[i][3] * PI / 180))
     
        dipole_components[i][2] = bohr_magneton * math.cos(dipolar_atoms[i][3] * 
                         PI / 180)

    return dipole_components,dipolar_atoms

def get_muon_loc_abs(unit_cell_dim,muon_loc): #Gets the location of the requested muon site with respect to the origin of the lattice, in Angstroms
    muon_loc_abs=[0,0,0]
    muon_loc_abs[0] = radius * unit_cell_dim[0] + muon_loc[0]
    muon_loc_abs[1] = radius * unit_cell_dim[1] + muon_loc[1]
    muon_loc_abs[2] = radius * unit_cell_dim[2] + muon_loc[2]
    
    return muon_loc_abs


def get_array(level, dimension): #helper function 
    if( level != len(dimension) ):
        return [get_array(level+1, dimension) for i in range(dimension[level])]
    else:
        return 0


def get_atom_loc_abs(atoms,side,unit_cell_dim,dipolar_atoms,muon_loc_abs,dipole_components): #Gets the individual vector components of the distance from each atom to the muon site
    atom_loc_abs=[0,0,0]
    atom_dist=get_array(0,[atoms,side,side,side,3])
    
    for i in range (atoms):
        for a in range (side):
            for b in range (side):
                for c in range (side): # number of unit cells from origin * unit cell size + location of the dipolar atom with respect to the origin of the unit cell
                    atom_loc_abs[0] = a * unit_cell_dim[0] + dipolar_atoms[i][0]	
                    atom_loc_abs[1] = b * unit_cell_dim[1] + dipolar_atoms[i][1]
                    atom_loc_abs[2] = c * unit_cell_dim[2] + dipolar_atoms[i][2]
                    
                    atom_dist[i][a][b][c][0] = (muon_loc_abs[0] - atom_loc_abs[0]) * 1E-10 #Distance from muon location to atom location		
                    atom_dist[i][a][b][c][1] = (muon_loc_abs[1] - atom_loc_abs[1]) * 1E-10 #1E-10 to convert from Angstroms to meters	
                    atom_dist[i][a][b][c][2] = (muon_loc_abs[2] - atom_loc_abs[2]) * 1E-10
    
    return atom_loc_abs,atom_dist

def get_field_components(atoms,side,dipole_components,atom_dist,lorentz_radius):  

    
    r_hat=[0,0,0]
    moments=0
    r_dot_r=0
    r_magnitude=0
    mu_dot_r_hat=0
    field_components=get_array(0,[atoms,side,side,side,3])
    for i in range (atoms):
        for a in range (side):
            for b in range (side):
                for c in range (side):
                    
                    r_magnitude=math.sqrt(math.pow(atom_dist[i][a][b][c][0],2) + math.pow(atom_dist[i][a][b][c][1],2) + math.pow(atom_dist[i][a][b][c][2],2))
                    
                    if (r_magnitude < lorentz_radius/1E10):
                        moments += 1
                        
                        r_dot_r=math.pow(atom_dist[i][a][b][c][0],2) 
                        +math.pow(atom_dist[i][a][b][c][1],2) 
                        +math.pow(atom_dist[i][a][b][c][2],2)
                    
                        for j in range (3):
                            r_hat[j] = (atom_dist[i][a][b][c][j] / r_magnitude)  #r_hat = r_vector / r_magnitude
                        
                        mu_dot_r_hat =(dipole_components[i][0]* r_hat[0] 
                        +dipole_components[i][1]* r_hat[1] 
                        + dipole_components[i][2] * r_hat[2])
                    
                        for j in range (3): #1E4 * mu_0/(4*pi) * r_magnitude^3 * ( 3 * (mu dot r_hat) * r_hat - dipole_moment ) from Griffiths Introduction to Electrodynamics,
                                              #3rd Edition p. 254 eqn 5.90
                            field_components[i][a][b][c][j] = 1E-3 / math.pow(r_magnitude,3) * (3 * mu_dot_r_hat * r_hat[j] - 
                                            dipole_components[i][j])
                    else:
                        for j in range (3):
                            field_components[i][a][b][c][j]=0
                        
                     
    return field_components,r_dot_r,mu_dot_r_hat,r_magnitude,r_hat,moments

def sum_field_components(atoms,side,field_components): #This function uses the mass array of the field components and calcualtes the individual field components in the xyz directions.
    
    field=[0,0,0]
    for i in range (atoms):
        for a in range (side):
            for b in range (side):
                for c in range (side):
                    field[0] = field[0] + field_components[i][a][b][c][0]
                    field[1] = field[1] + field_components[i][a][b][c][1]
                    field[2] = field[2] + field_components[i][a][b][c][2]
    return field

#==============================================================================
#================================TOP LEVEL=====================================
#==============================================================================

Flag=1
Verbose=1
Date=time.strftime("%d-%m-%Y")
Timer=time.strftime("%H-%M-%S")
print ("\n\nProgram Started...") 
word=len(Name)
g = open(str(Name)[:-4]+"Results.txt", 'w+')

count=1
DataMatrix=[]
while Flag==1:
    
    DataArray=[0,0,0,0,0,0,0,0,0]
    FileName,unit_cell_dim, dipolar_atoms,atoms=open_file(Name)
    while Verbose==1:
        
        print ("\nCurrent Date: "+Date)
        g.write("\nCurrent Date: "+Date)
        print ("\nCurrent Time: "+time.strftime("%H:%M:%S"))
        g.write("\nCurrent Time: "+time.strftime("%H:%M:%S"))
        
        print("\nFile Name is: ")
        g.write("\nFile Name is: ")
        print(FileName)
        g.write(FileName)
    
        print("\n\nUnit Cell Dim: ")
        g.write("\n\nUnit Cell Dim: ")
        print (unit_cell_dim )
        g.write(str(unit_cell_dim))
    
        print("\n\ndipolar atoms: ")
        g.write("\n\ndipolar atoms: ")
        for elem in dipolar_atoms:
            print (elem)
            g.write(str(elem)+'\n')
    
        print ("\n\nNumber of sites: \n")
        g.write("\n\nNumber of sites: ")
        print (atoms)
        g.write(str(atoms)+'\n')
        Verbose=0
    
    lorentz_radius=lorentz_error_check(lorentz_radius)
    
    muon_loc,side=get_dimensions(unit_cell_dim,atoms)

    dipole_components,dipolar_atoms=convert_dimensions(dipolar_atoms,unit_cell_dim,atoms)
    
    muon_loc_abs=get_muon_loc_abs(unit_cell_dim,muon_loc)
         
    atom_loc_abs,atom_dist= get_atom_loc_abs(atoms,side,unit_cell_dim,dipolar_atoms,muon_loc_abs,dipole_components)

    field_components,r_dot_r,mu_dot_r_hat,r_magnitude,r_hat,moments=get_field_components(atoms,side,dipole_components,atom_dist,lorentz_radius)  

    field=sum_field_components(atoms,side,field_components)

    H= math.sqrt(math.pow(field[0],2)+math.pow(field[1],2)+math.pow(field[2],2))
    
    DataAnalysis=muon_loc_abs



    DataArray[0]=count
    DataArray[1]=round(muon_loc[0],4)
    DataArray[2]=round(muon_loc[1],4)
    DataArray[3]=round(muon_loc[2],4)
    DataArray[4]=round(field[0],3)
    DataArray[5]=round(field[1],3)
    DataArray[6]=round(field[2],3) 
    DataArray[7]=round(H,3)
    DataArray[8]=moments
    
    DataMatrix.append(DataArray)
             
    question=raw_input("Would you like to Continue,\n(y) or (n): \n")
    
    if question == 'y' or question == 'Y' :
        Flag=1
        count+=1

#        g.write("\n--------------------------------------------------------------------------")

    elif question == 'n' or question== 'N':
        Flag=0

num=10

print('Run'+' '*9+ 'Mu_x'+' '*8+'Mu_y'+' '*8+'Mu_z'+' '*8+ 'H_x'+' '*9+ 'H_y'+' '*9+ 'H_z'+' '*9+'H_Tot'+' '*5+ 'Moments' )
g.write('Run'+' '*9+ 'Mu_x'+' '*7+'Mu_y'+' '*7+'Mu_z'+' '*7+ 'H_x'+' '*7+ 'H_y'+' '*9+ 'H_z'+' '*7+'H_Tot'+' '*4+ 'Moments\n' )
for item in DataMatrix:
    print(" "+str(item[0])+" "*(num-len(str(item[0])))+str(item[1])+'a'+" "*(num-len(str(item[1])))
        +" "+str(item[2])+'a'+" "*(num-len(str(item[2])))+" "+str(item[3])+'a'+" "*(num-len(str(item[3])))
        +" "+str(item[4])+'G'+" "*(num-len(str(item[4])))+" "+str(item[6])+'G'+" "*(num-len(str(item[5])))
        +" "+str(item[6])+'G'+" "*(num-len(str(item[6])))+" "+str(item[7])+'G'+" "*(num-len(str(item[7])))
        +" "+str(item[8])              )
    
    g.write(" "+str(item[0])+" "*(num-len(str(item[0])))+str(item[1])+'a'+" "*(num-len(str(item[1])))
         +" "+str(item[2])+'a'+" "*(num-len(str(item[2])))+" "+str(item[3])+'a'+" "*(num-len(str(item[3])))
        +" "+str(item[4])+'G'+" "*(num-len(str(item[4])))+" "+str(item[6])+'G'+" "*(num-len(str(item[5])))
        +" "+str(item[6])+'G'+" "*(num-len(str(item[6])))+" "+str(item[7])+'G'+" "*(num-len(str(item[7])))
        +" "+str(item[8])              )




if count==1:
    print("\nProgram ran with %d iteration.\n" % (count))
    g.write("\nProgram ran with %d iteration.\n" % (count))
else:
    print("\nProgram ran with %d iterations.\n" % (count))
    g.write("\nProgram ran with %d iterations.\n" % (count))
    
 
print("\nProgram terminated...")
g.write("\nProgram terminated...")
g.close()

    



    






    
   
   
